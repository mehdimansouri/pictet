AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'AWS CloudFormation template for NBA Case Study'
Parameters:
  InstanceKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The name of the private key file to use for SSH/RDP access.  You shouldn't need to do any SSH access, but just in case.
  TwitterTermList:
    Description: List of terms for twitter to listen to
    Type: String
    Default: "'@sixers','@trailblazers','@bucks','@chicagobulls','@cavs','@celtics','@laclippers','@memgrizz','@atlhawks','@miamiheat','@hornets','@utahjazz','@sacramentokings','@nyknicks','@lakers','@orlandomagic','@dallasmavs','@brooklynnets','@nuggets','@pacers','@pelicansnba','@detroitpistons','@raptors','@houstonrockets','@spurs','@suns','@okcthunder','@timberwolves','@warriors','@washwizards'"
  TwitterLanguages:
    Description: List of languages to use for the twitter streaming reader. In order to limit the cost, we will keep only English.
    Type: String
    Default: "'en'"
  TwitterAuthConsumerKey:
    Description: Consumer key for access twitter
    Type: String
  TwitterAuthConsumerSecret:
    Description: Consumer Secret for access twitter
    Type: String
  TwitterAuthAccessToken:
    Description: Access Token Secret for calling twitter
    Type: String
  TwitterAuthAccessTokenSecret:
    Description: Access Token Secret for calling twitter
    Type: String
  ApplicationName:
    Description: Name of the application deploying for the Social Media Analytics
    Type: String
    Default: Social-Media-Analytics
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.193.0.0/16
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.193.10.0/24

Mappings:
  #  This is just the Amazon Linux AMI:
  AmazonLinuxAMI:
    us-east-1: # Virginia
      AMI: ami-a4c7edb2
    us-east-2: # Ohio
      AMI: ami-8a7859ef
    us-west-1: # North California
      AMI: ami-327f5352
    us-west-2: # Oregon
      AMI: ami-6df1e514
    eu-west-1: # Ireland
      AMI: ami-d7b9a2b1
    eu-west-2: # London
      AMI: ami-ed100689
    eu-central-1: # Frankfurt
      AMI: ami-82be18ed
    sa-east-1: # Sao Paulo
      AMI: ami-87dab1eb
    ap-southeast-1: # Singapore
      AMI: ami-77af2014
    ap-southeast-2: # Sydney
      AMI: ami-10918173
    ap-northeast-1: # Tokyo
      AMI: ami-3bd3c45c
    ap-northeast-2: # Seoul
      AMI: ami-e21cc38c
    ca-central-1: # Canada
      AMI: ami-a7aa15c3
    ap-south-1: # Mumbai
      AMI: ami-47205e28


Resources:
  TweetsEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for EC2 Twitter Reader
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: TweetsEC2SecurityGroup
      - Key: ResourceGroup
        Value: CloudFormationResource
      - Key: Project
        Value: !Join ['-', [!Ref 'ApplicationName', !Ref 'AWS::Region']]
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

  SocialMediaAnalyticsEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: '/'
      Policies:
        -
          PolicyName: socialmedia-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                    - 'firehose:DeleteDeliveryStream'
                    - 'firehose:PutRecord'
                    - 'firehose:PutRecordBatch'
                    - 'firehose:UpdateDestination'
                Resource: '*'
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
          - Key: Name
            Value: !Ref ApplicationName

  InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
          Tags:
              - Key: Name
                Value: !Ref ApplicationName

  InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          InternetGatewayId: !Ref InternetGateway
          VpcId: !Ref VPC

  PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs ]
          CidrBlock: !Ref PublicSubnet1CIDR
          MapPublicIpOnLaunch: true
          Tags:
              - Key: Name
                Value: !Sub ${ApplicationName} Public Subnet (AZ1)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
        VpcId: !Ref VPC
        Tags:
            - Key: Name
              Value: !Sub ${ApplicationName} Public Routes

  DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1

  TweetsBucket:
    Type: AWS::S3::Bucket

  TwitterStreamingInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - !Ref SocialMediaAnalyticsEC2Role

  TwitterStreamingReaderServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ AmazonLinuxAMI, !Ref 'AWS::Region', AMI]  # Lookup the AMI in the region map
      InstanceType: t2.medium                                         # Any size is fine
      KeyName: !Ref InstanceKeyName                                   # Use the keypair from the input parameters
      SecurityGroupIds:
      - !Ref TweetsEC2SecurityGroup
      IamInstanceProfile: !Ref TwitterStreamingInstanceProfile
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'ApplicationName', 'DeployGroup', !Ref 'AWS::Region']]
      - Key: Project
        Value: !Join ['-', [!Ref 'ApplicationName', !Ref 'AWS::Region']]
      UserData:
        Fn::Base64: 
          Fn::Sub:
          - |     # No more Fn::Join needed
            #!/bin/bash -ex
            set -e

            sleep 60

            yum clean all

            yum -y install nodejs npm --enablerepo=epel

            npm config set registry http://registry.npmjs.org/

            npm install node-sass request@2.81.0

            echo "var twitter_config = module.exports = {
            twitter: {
                consumer_key: '${TwitterConsumerKey}',
                consumer_secret: '${TwitterConsumerSecret}',
                access_token: '${TwitterAccessToken}',
                access_token_secret: '${TwitterTokenSecret}'
              },
            topics: [${TwitterTerms}],
            languages: [${TwitterLanguages}],
            kinesis_delivery: '${KinesisIngestionFirehose}'
            }" > /home/ec2-user/twitter_reader_config.js

            wget https://s3.amazonaws.com/serverless-analytics/SocialMediaAnalytics-blog/SocialAnalyticsReader.tar

            tar --warning=no-unknown-keyword -xf SocialAnalyticsReader.tar -C /home/ec2-user/

            echo "Service started."
          - {
              TwitterTerms: !Ref TwitterTermList,
              TwitterLanguages: !Ref TwitterLanguages ,
              TwitterConsumerKey: !Ref TwitterAuthConsumerKey,
              TwitterConsumerSecret: !Ref TwitterAuthConsumerSecret,
              TwitterAccessToken: !Ref TwitterAuthAccessToken,
              TwitterTokenSecret: !Ref TwitterAuthAccessTokenSecret,
              KinesisIngestionFirehose: !Ref IngestionFirehoseStream
            }

  IngestionFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join ['', ['arn:aws:s3:::', !Ref TweetsBucket]]
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
        Prefix: 'raw/'
        CompressionFormat: 'UNCOMPRESSED'
        RoleARN: !GetAtt IngestionFirehoseRole.Arn

  EntitiesFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join ['', ['arn:aws:s3:::', !Ref TweetsBucket]]
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
        Prefix: 'entities/'
        CompressionFormat: 'UNCOMPRESSED'
        RoleARN: !GetAtt IngestionFirehoseRole.Arn

  SentimentFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join ['', ['arn:aws:s3:::', !Ref TweetsBucket]]
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
        Prefix: 'sentiment/'
        CompressionFormat: 'UNCOMPRESSED'
        RoleARN: !GetAtt IngestionFirehoseRole.Arn

  IngestionFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref 'AWS::AccountId'

  IngestionFirehosePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: TweetIngestionFirehosePolicy
      Roles:
        - !Ref IngestionFirehoseRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref TweetsBucket]]
              - !Join ['', ['arn:aws:s3:::', !Ref TweetsBucket, '/*']]
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource:
              - arn:aws:logs:*:*:*

  SocialMediaAnalyticLambdaFuntionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: SocialMediaAnalyticLambdaFuntionExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: CloudWatchAccess
            Effect: Allow
            Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents']
            Resource: arn:aws:logs:*:*:*
          - Sid: S3Access
            Effect: Allow
            Action: ['s3:GetObject', 's3:PutObject']
            Resource: [!GetAtt [TweetsBucket, Arn],
                      !Join ['', [!GetAtt [TweetsBucket, Arn], /*]]]
          - Sid: FirehoseAccess
            Effect: Allow
            Action: ['firehose:ListDeliveryStreams', 'firehose:PutRecord', 'firehose:PutRecordBatch']
            Resource: [!GetAtt [SentimentFirehoseStream, Arn],
                       !GetAtt [EntitiesFirehoseStream, Arn]]
          - Sid: ComprehendAccess
            Effect: Allow
            Action: ['comprehend:DetectEntities', 'comprehend:DetectSentiment']
            Resource: '*'   
          - Sid: TranslateAccess
            Effect: Allow
            Action: ['translate:TranslateText']
            Resource: '*'           

  SocialMediaAnalyticsLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: s3://serverless-analytics/SocialMediaAnalytics-blog/SocialMediaLambdaFunction.zip
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 256
      Timeout: 300
      Role:
        Fn::GetAtt:
        - SocialMediaAnalyticLambdaFuntionLambdaRole
        - Arn
      Environment:
        Variables:
          SENTIMENT_STREAM: !Ref SentimentFirehoseStream
          ENTITY_STREAM: !Ref EntitiesFirehoseStream
Outputs:
  SSHCommand:
    Description: To establish an SSH tunnel with the twitter stream reader, type the following command.
    Value: !Join ['', [ssh -i ~/, !Ref 'InstanceKeyName', .pem ec2-user@, !GetAtt [
          TwitterStreamingReaderServer, PublicDnsName]]]
  
  EC2InstanceConsoleURL:
    Description: url to ec2 EC2InstanceConsoleURL
    Value: !Join ['', ['https://', !Ref "AWS::Region", '.console.aws.amazon.com/ec2/home?region=', !Ref "AWS::Region", '#Instances:search=', !Ref 'TwitterStreamingReaderServer']]

  LambdaFunctionConsoleURL:
    Description: URL to the Lambda Function console
    Value: !Join ['', ['https://console.aws.amazon.com/lambda/home?region=', !Ref "AWS::Region", '#/functions/', !Ref "SocialMediaAnalyticsLambda", '?tab=graph']]

  S3ConsoleURL:
    Description: URL to the Lambda Function console
    Value: !Join ['', ['https://s3.console.aws.amazon.com/s3/buckets/', !Ref 'TweetsBucket', '/?region=', !Ref "AWS::Region", '&tab=overview']]

  TwitterRawLocation:
    Description: S3 Twitter Raw location.
    Value: !Join ['', ['s3://', !Ref 'TweetsBucket', /raw/]]

  TwitterEntitiesLocation:
    Description: S3 Twitter Entities location.
    Value: !Join ['', ['s3://', !Ref 'TweetsBucket', /entities/]]

  TwitterSentimentLocation:
    Description: S3 Twitter Sentiment location.
    Value: !Join ['', ['s3://', !Ref 'TweetsBucket', /sentiment/]]

